---
layout: post
title: "Git Flow"
img: git.jpg
date: 2018-07-23 15:02:00
category: blog
author: ykx
description: Learning how to use Git.
tag: [Learning, Git, Computer]
---

[TOC]

## Git使用流程

### 1 常用 Git 命令清单

http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html

![img](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png)

##### 常用git命令

* git add
* git commit
* git push
* git pull
* git fetch
* git clone
* git checkout

##### 名词解释

* Workspace: 工作区
* Index / Stage: 暂存区
* Repository: 仓库区（或本地仓库）
* Remote: 远程仓库

#### 1.1 新建代码库

| Command                 | Usage             | Flag |
| ----------------------- | ----------------- | :--- |
| git init                | 在当前目录新建一个Git代码库   | √    |
| git init [project-name] | 新建一个目录，初始化为Git代码库 |      |
| git clone [url]         | 下载一个项目和整个代码历史     | √    |

#### 1.2 配置(.gitconfig)

| Command                                  | Usage        | Flag |
| ---------------------------------------- | ------------ | :--- |
| git config --list                        | 显示当前的Git配置   |      |
| git config -e [--global]                 | 编辑Git配置文件    |      |
| git config [--global] user.name "[name]" | 设置提交代码时的用户信息 | √    |
| git config [--global] user.email "[email address]" | 设置提交代码时的用户信息 | √    |

#### 1.3 增加/删除文件

| Command                                  | Usage                                | Flag |
| ---------------------------------------- | ------------------------------------ | ---- |
| git add \[file1\] \[file2\] ...          | 添加指定文件到暂存区                           |      |
| git add [dir]                            | 添加指定目录到暂存区，包括子目录                     |      |
| git add .                                | 添加当前目录的所有文件到暂存区                      | √    |
| git add -p                               | 添加每个变化前，都会要求确认；对于同一个文件的多处变化，可以实现分次提交 |      |
| git rm \[file1\] \[file2\] ...           | 删除工作区文件，并且将这次删除放入暂存区                 |      |
| git rm --cached \[file\]                 | 停止追踪指定文件，但该文件会保留在工作区                 | √    |
| git mv \[file-original\] \[file-renamed\] | 改名文件，并且将这个改名放入暂存区                    |      |

#### 1.4 代码提交

| Command                                  | Usage                                    | Flag |
| ---------------------------------------- | ---------------------------------------- | ---- |
| git commit -m \[message\]                | 提交暂存区到仓库区                                | √    |
| git commit \[file1\] \[file2\] ... -m \[message\] | 提交暂存区的指定文件到仓库区                           |      |
| git commit -a                            | 提交工作区自上次commit之后的变化，直接到仓库区               |      |
| git commit -v                            | 提交时显示所有diff信息                            |      |
| git commit --amend -m \[message\]        | 使用一次新的commit，替代上一次提交；如果代码没有任何新变化，则用来改写上一次commit的提交信息 |      |
| git commit --amend \[file1\] \[file2\] ... | 重做上一次commit，并包括指定文件的新变化                  |      |

#### 1.5 分支

| Command                                  | Usage                  | Flag |
| ---------------------------------------- | ---------------------- | ---- |
| git branch                               | 列出所有本地分支               | √    |
| git branch -r                            | 列出所有远程分支               | √    |
| git branch -a                            | 列出所有本地分支和远程分支          | √    |
| git branch \[branch-name]                | 新建一个分支，但依旧停留在当前分支      | √    |
| git checkout -b \[branch\]               | 新建一个分支，并切换到该分支         |      |
| git branch \[branch\] \[commit\]         | 新建一个分支，指向指定commit      |      |
| git branch --track \[branch\] \[remote-branch\] | 新建一个分支，与指定的远程分支建立追踪关系  |      |
| git checkout \[branch-name\]             | 切换到指定分支，并更新工作区         | √    |
| git checkout -                           | 切换到上一个分支               |      |
| git branch --set-upstream \[branch\] \[remote-branch\] | 建立追踪关系，在现有分支与指定的远程分支之间 |      |
| git merge [branch]                       | 合并指定分支到当前分支            |      |
| git cherry-pick \[commit]                | 选择一个commit，合并进当前分支     |      |
| git branch -d \[branch-name\]            | 删除分支                   | √    |
| git push origin --delete \[branch-name\] | 删除远程分支                 |      |
| git branch -dr [remote-branch]           | 删除远程分支                 |      |

#### 1.6 标签

| Command                                | Usage            | Flag |
| -------------------------------------- | ---------------- | ---- |
| git tag                                | 列出所有tag          |      |
| git tag \[tag\]                        | 新建一个tag在当前commit |      |
| git tag \[tag\] \[commit\]             | 新建一个tag在指定commit |      |
| git tag -d \[tag\]                     | 删除本地tag          |      |
| git push origin :refs/tags/\[tagName\] | 删除远程tag          |      |
| git show \[tag\]                       | 查看tag信息          |      |
| git push \[remote\] \[tag\]            | 提交指定tag          |      |
| git push \[remote\] --tags             | 提交所有tag          |      |
| git checkout -b \[branch\] \[tag\]     | 新建一个分支，指向某个tag   |      |

#### 1.7 查看信息

| Command                                  | Usage                             | Flag |
| ---------------------------------------- | --------------------------------- | ---- |
| git status                               | 显示有变更的文件                          | √    |
| git log                                  | 显示当前分支的版本历史                       | √    |
| git log --stat                           | 显示commit历史，以及每次commit发生变更的文件      |      |
| git log -S \[keyword\]                   | 搜索提交历史，根据关键词                      |      |
| git log \[tag\] HEAD --pretty=format:%s  | 显示某个commit之后的所有变动，每个commit占据一行    |      |
| git log \[tag\] HEAD --grep feature      | 显示某个commit之后的所有变动，其“提交说明”必须符合搜索条件 |      |
| git log --follow \[file\]                | 显示某个文件的版本历史，包括文件改名                |      |
| git whatchanged \[file\]                 | 显示某个文件的版本历史，包括文件改名                |      |
| git log -p \[file\]                      | 显示指定文件相关的每一次diff                  |      |
| git log -5 --pretty --oneline            | 显示过去5次提交                          |      |
| git shortlog -sn                         | 显示所有提交过的用户，按提交次数排序                |      |
| git blame \[file\]                       | 显示指定文件是什么人在什么时间修改过                |      |
| git diff                                 | 显示暂存区和工作区的差异                      | √    |
| git diff --cached \[file\]               | 显示暂存区和上一个commit的差异                |      |
| git diff HEAD                            | 显示工作区和当前分支最新commit之间的差异           |      |
| git diff \[first-branch\]...\[second-branch\] | 显示两次提交之间的差异                       |      |
| git diff --shortstat "@{0 day ago}"      | 显示今天你写了多少行代码                      |      |
| git show --name-only \[commit\]          | 显示某次提交发生变化的文件                     |      |
| git show \[commit\]:\[filename\]         | 显示某次提交时，某个文件的内容                   |      |
| git reflog                               | 显示当前分支的最近几次提交                     |      |

#### 1.8 远程同步

| Command                              | Usage               | Flag |
| ------------------------------------ | ------------------- | ---- |
| git fetch \[remote\]                 | 下载远程仓库的所有变动         | √    |
| git remove -v                        | 显示所有远程仓库            |      |
| git remote show \[remote\]           | 显示某个远程仓库的信息         |      |
| git remote add \[shortname\] \[url\] | 增加一个新的远程仓库，并命名      |      |
| git pull \[remote\] \[branch\]       | 取回远程仓库的变化，并与本地分支合并  | √    |
| git push \[remote\] \[branch\]       | 上传本地指定分支到远程仓库       | √    |
| git push \[remote\] --force          | 强行推送当前分支到远程仓库，即使有冲突 |      |
| git push \[remote\] --all            | 推送所有分支到远程仓库         |      |

#### 1.9 撤销

| Command                          | Usage                                    | Flag |
| -------------------------------- | ---------------------------------------- | ---- |
| git checkout \[file\]            | 恢复暂存区的指定文件到工作区                           |      |
| git checkout \[commit\] \[file\] | 恢复某个commit的制定文件到暂存区和工作区                  |      |
| git checkout .                   | 恢复暂存区的所有文件到工作区                           |      |
| git reset \[file\]               | 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变         |      |
| git reset --hard                 | 重置暂存区与工作区，与上一次commit保持一致                 | √    |
| git reset \[commit\]             | 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变        | √    |
| git reset --hard \[commit\]      | 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 | √    |
| git reset --keep \[commit\]      | 重置当前HEAD为指定commit，但保持暂存区和工作区不变           |      |
| git revert \[commit\]            | 新建一个commit，用来撤销指定commit；后者的所有变化都将被前者抵消，并且应用到当前分支 |      |
| git stash & git stash pop        | 暂时将未提交的变化移除，稍后再移入                        |      |

#### 1.10 其他

| Command     | Usage        | Flag |
| ----------- | ------------ | ---- |
| git archive | 生成一个可供发布的压缩包 |      |


### 2 Git远程操作详解

http://www.ruanyifeng.com/blog/2014/06/git_remote.html

##### 用于Git远程操作的5个命令

* git clone
* git remote
* git fetch
* git pull
* git push

#### 2.1 git clone

远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到`git clone`命令：

~~~bash
git clone <版本库的网址>
git clone <版本库的网址> <本地目录名>
~~~

git clone支持多种协议：HTTP(s),SSH,Git,本地文件协议等

通常Git协议下载速度最快，SSH协议用于需要用户认证的场合。

#### 2.2 git remote

为了便于管理，Git要求每个远程主机都必须指定一个主机名，`git remote`命令就用于管理主机名：

~~~Bash
git remote # 列出所有远程主机
git remote -v # 参看远程主机的网址
# 克隆版本库时，所使用的远程主机自动被Git命名为`origin`，可以用参数`-o`指定克隆时的远程主机名
git clone -o jQuery https://github.com/jquery/jquery.git

git remote show <主机名> # 查看该主机的详细信息
git remote add <主机名> <网址> # 添加远程主机
git remote rm <主机名> # 删除远程主机
git remote rename <原主机名> <新主机名> # 远程主机的改名
~~~

#### 2.3 git fetch

1. 一旦远程主机的版本库有了更新(commit)，需要将这些更新取回本地：

~~~Bash
git fetch <远程主机名> # 将某个远程主机的更新全部取回本地
git fetch # 通常用来查看他人的进程，取回的代码对本地的开发代码没有影响
git fetch <远程主机名> <分支名> # 取回特定分支的更新
~~~

2. 所取回的更新，在本地主机上要用“远程主机名/分支名”的形式读取。比如`origin`主机的`master`，就要用`origin/master`读取。

~~~Bash
git branch -r # 查看远程分支
git branch -a # 查看所有分支
~~~

3. 取回远程主机的更新后，可以在它的基础上，使用`git checkout`命令创建一个新的分支。

~~~Bash
# 在`origin/master`的基础上创建一个新分支
git checkout -b newBranch origin/master
~~~

4. 也可以使用`git merge`命令或者`git rebase`命令，在本地分支上合并远程分支

~~~Bash
git merge origin/master
git rebase origin/master
~~~

#### 2.4 git pull

1. git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。

~~~Bash
git pull <远程主机名> <远程分支名>:<本地分支名>

#取回`origin`主机的`next`分支，与本地的`master`分支合并
git pull origin next:master

# 远程分支和当前分支合并，可省略冒号后面的部分
git pull origin next

# 等同于先git fetch，再git merge
git fetch origin
git merge origin/next
~~~

2. 在某些场合，Git会自动在本地分支与远程分支之间建立一种追踪关系(tracking)。比如，在`git clone`的时候，所有本地分支默认与远程主机的同名分支建立追踪关系，即本地的`master`分支自动追踪`origin/master`分支。

~~~Bash
# 手动建立追踪关系
git branch --set-upstream master origin/next

# 如果存在追踪关系，git pull可以省略远程分支名
git pull origin # 表示本地的当前分支自动与对应的`origin`主机“追踪分支”进行合并

# 如果当前分支只有一个追踪分支，连远程主机名都可以省略
git pull # 当前分支自动与唯一一个追踪分支进行合并
~~~

3. 如果合并需要采用rebase模式，可以使用`--rebase`选项

~~~Bash
git pull --rebase <远程主机名> <远程分支名>:<本地分支名>
~~~

4. 如果远程主机删除了某个分支，默认情况下，`git pull`不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致`git pull`不知不觉删除了本地分支。但是加上参数`-p`就会在本地删除远程已经删除的分支。

~~~Bash
git pull -p

# 等同于下面的命令
git fetch --prune origin
git fetch -p
~~~

#### 2.5 git push

1. `git push`命令用于将本地分支的更新，推送到远程主机。它的格式与`git pull`命令相仿。

~~~Bash
git push <远程主机名> <本地分支名>:<远程分支名>

# 如果省略远程分支名，则表示将本地分支推送与之存在“追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建
git push origin master

# 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支
git push origin:master
git push origin --delete master

# 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略（追踪关系的主体是分支）
git push origin

# 如果当前分支只有一个追踪分支，那么主机名都可以省略
git push

# 如果当前分支与多个主机存在追踪关系，则可以使用`-u`选项指定一个默认主机，这样后面就可以不加任何参数使用`git push`
git push -u origin master # 将本地的`master`推送到`origin`主机，同时指定`origin`为默认主机
~~~

2. 不带任何参数的`git push`，默认只推送当前分支，这叫做simple方式。此外还有一种matching方式，会推送所有有对应的远程分支的本地分支。如果要修改这个设置，可以采用`git config`命令

~~~Bash
git config --global push.default matching
git config --global push.default simple
~~~

3. 还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用`--all`选项

~~~Bash
git push --all origin # 将所有本地分支都推送到origin主机
~~~

4. 如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做`git pull`合并差异，然后再推送到远程主机。`--force`选项可以强制推送，导致远程主机上更新的版本被覆盖

~~~Bash
git push --force origin
~~~

5. `git push`不会推送标签(tag)，除非使用`--tags`选项

~~~Bash
git push origin --tags
~~~

### 3 Git分支管理策略

http://www.ruanyifeng.com/blog/2012/07/git.html

有些传统的版本管理软件，分支操作实际上会生成一份现有代码的物理拷贝，而Git只生成一个指向当前版本（又称“快照”）的指针，因而非常快捷易用。

#### 3.1 主分支Master

首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。

Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支进行开发。

#### 3.2 开发分支Develop

主分支只用来发布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。

这个分支可以用来生成代码的最新隔夜版本 (nightly)。如果想正式对外发布，就在Master分支上，对Develop分支进行“合并” (merge)。

~~~Bash
# Git创建Develop分支的命令
git checkout -b develop master # 基于master分支创建develop分支

# 将Develop分支发布到Master分支的命令
git checkout master # 切换到master分支
git merge --no-ff develop # 对develop分支进行合并
~~~

默认情况下，Git执行“快速式合并”(fast-forward merge)，会直接将master分支指向develop分支。使用--no-ff参数后，会执行正常合并，在master分支上生成一个新节点。

[图]

#### 3.3 临时性分支

前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。常设分支只需要这两条就够了。除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：

* 功能 (feature) 分支
* 预发布 (release) 分支
* 修补bug (fixbug) 分支

这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。

#### 3.4 功能分支

**功能分支是为了开发某种特定功能，从Develop分支上面分出来的。** 开发完成后，要再并入Develop。功能分支的名字，可以采用feature-\*的形式命名。

~~~Bash
# 创建一个功能分支
git checkout -b feature-x develop

# 开发完成后将功能分支合并到develop分支
git checkout develop
git merge --no-ff feature-x

# 删除feature分支
git branch -d feature-x
~~~

#### 3.5 预发布分支

**预发布分支是指发布正式版本之前（即合并到master分支之前）我们可能需要有一个预发布的测试版本进行测试。预发布分支是从Develop分支上面分出来的。** 预发布结束以后，必须合并进develop和master分支。它的命名可以采用release-\*的形式。

~~~Bash
# 创建一个预发布分支
git checkout -b release-1.2 develop

# 合并到master分支
git checkout master
git merge --no-ff release-1.2
git tag -a 1.2 对合并生成的新结点，做一个标签

# 再合并到develop分支
git checkout develop
git merge --no-ff release-1.2

# 最后删除预发布分支
git branch -d release-1.2
~~~

#### 3.6 修补bug分支

**修补bug分支用来修补软件正式发布以后出现的bug。修补bug分支是从master分支上面分出来的。** 修补结束以后，再合并进master和develop分支。它的命名可以采用fixbug-\*的形式。

~~~Bash
# 创建一个修补bug分支
git checkout -b fixbug-0.1 master

# 修补结束后合并到master分支
git checkout master
git merge --no-ff fixbug-0.1
git tag -a 0.1.1

# 再合并到develop分支
git checkout develop
git merge --no-ff fixbug-0.1

# 最后删除“修补bug分支”
git branch -d fixbug-0.1
~~~

### 4 Git使用规范流程

http://www.ruanyifeng.com/blog/2015/08/git-use-process.html

[图]

#### 4.1 新建分支

~~~Bash
# 获取主干最新代码
git checkout master
git pull

#新建一个开发分支myfeature
git checkout -b myfeature
~~~

#### 4.2 提交分支commit

~~~Bash
git  add --all # 保存所有变化（包括新建、修改和删除）
git status # 查看发生变动的文件
git commit --verbose # 列出diff的结果
~~~

#### 4.3 撰写提交信息

#### 4.4 与主干同步

~~~Bash
git fetch origin
git rebase origin/master
~~~

#### 4.5 合并commit

分支开发完成后可能有一堆commit，但合并到主干时，往往希望只有一个（或最多两三个）commit，需要使用`git rebase`命令

~~~Bash
git rebase -i origin/master
~~~

`git rebase`命令的i参数表示互动 (interactive)，这时git会打开一个互动界面，进行下一步操作。

（具体操作见原文）

#### 4.6 推送到远程仓库

~~~Bash
git push --force origin myfeature
~~~

`git push`命令要加上force参数，因为rebase以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送。

#### 4.7 发出pull request

提交到远程仓库以后，就可以发出`pull request`到`master`分支，然后请求别人进行代码review，确认可以合并到`master`。

### 5 Git工作流程

http://www.ruanyifeng.com/blog/2015/12/git-workflow.html

##### 三种广泛使用的工作流程

* Git flow
* Github flow
* Gitlab flow

#### 5.1 功能驱动

三种工作流程有一个共同点：“功能驱动式开发” (Feature-driven development, FDD)。它指的是，需求是开发的起点，先有需求再有功能分支 (feature branch) 或者补丁分支 (hotfix branch)。完成开发后，该分支就合并到主分支，然后被删除。

#### 5.2 Git flow

##### 5.2.1 特点

* 2个长期分支：主分支master，开发分支develop

* 3个短期分支：功能分支feature branch，补丁分支hotfix branch，预发分支release branch

##### 5.2.2 评价

* 优点：清晰可控

* 缺点：相对复杂，同时维护两个长期分支

#### 5.3 Github flow

Github flow是Git flow的简化版，专门配合“持续发布”。它是Github.com使用的工作流程。

##### 5.3.1 流程

只有一个长期分支`master`


---

##### 已经掌握的命令

~~~Bash
git init
git clone
git config
git add
git rm --cached
git commit -m
git branch
git checkout
git status
git log
git diff
git fetch
git pull
git push
git reset
~~~



### 参考文献

http://www.ruanyifeng.com/blog/2015/12/git-workflow.html

http://www.ruanyifeng.com/blog/2014/06/git_remote.html

http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html

http://www.ruanyifeng.com/blog/2015/08/git-use-process.html
